const express = require('express');     // import express  
const mongoose = require('mongoose');
const keys = require('./config/keys');
const cookieSession = require('cookie-session');
const passport = require('passport');
require('./models/User');
require('./services/passport');

mongoose.connect(keys.mongoURI, { useNewUrlParser: true }); // connecting to mongoDB using npm mongoose package, and key stored in config

const app = express();                  // creating Express app

app.use(                // enabling cookies to be used inside of this application
    cookieSession({
        // provide configuration object with two properties: 
        maxAge: 30*24*60*60*1000,   // how long before cookie expires (setting it to 30 days and expressing it as milliseconds)
        keys: [keys.cookieKey]      // sign or encrypt the cookie from keys file (string generated by me, can be randomized)
    })
);

// telling Passport.js to use cookies for authentication
app.use(passport.initialize());
app.use(passport.session());

require('./routes/authRoutes')(app);    // initially, we created a const authRoutes = require(path) statement, this refactoring makes it easier to import routes

const PORT = process.env.PORT || 5000;  // look in the underlying environment to see for established ports, or use 5000
app.listen(PORT);                       // instructs express to tell node that it wants to listen to incoming traffic from PORT

